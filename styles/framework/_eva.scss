// idée de base
/*
//ratio d'ajustement
--Φ: 1.61803398875;
//screen size on figma || XD ( test 150px )
--screen: 1440;
--base-1: 150; 
--calc-1: calc(calc(var(--base-1) / var(--screen)) * 100);
--calc-1-ez: calc(calc(var(--base-1) / var(--screen)) * 142.4);

--1rem-min: calc(var(--calc-1) * 0.38rem);
--1vw: calc(var(--calc-1) * 1vw);
--1vw-ez: calc(calc(var(--calc-1-ez) * 1vw) - var(--1rem-min)) ;
--1rem-max: calc(var(--calc-1) * 1rem);

--1-ez: clamp(1rem , var(--1vw-ez) ,var(--1rem-max));
--1: clamp(calc(var(--1rem-min) / var(--Φ)) , var(--1vw),var(--1rem-max));
--1-: clamp(var(--1rem-min)  , var(--1vw) ,var(--1rem-max));
--1--: clamp(calc(var(--1rem-min) * var(--Φ)) , var(--1vw) ,var(--1rem-max));
*/

// START FRAMEWORK
// EVA-CSS v1.0

@use "sass:math";
@use "sass:map";

$max: 1rem;
$Φ: 1.61803398875;
$min: 0.38rem;
$ez: 142.4;
$unit: 1rem;
$unit-fluid: 1vw;

$screen: 1440;
$sizes: 5, 10, 15, 25, 40, 65, 105, 170, 275, 445, 720;
$font-sizes: 12, 16, 24, 28, 40, 58, 72;
$eva: 0;

$setters-type: "__", "_", "", "-", "-px", "-rem";

$sizing-class: "__", "_", "", "-";
@if $dev-mode {
  $sizing-class: append($sizing-class, "-px");
  $sizing-class: append($sizing-class, "-rem");
}

$font-size-class: "__", "_", "";
@if $dev-mode {
  $font-size-class: append($font-size-class, "-px");
  $font-size-class: append($font-size-class, "-rem");
}

$properties: (
  w: width,
  h: height,
  p: padding,
  px: padding-inline,
  pr: padding-right,
  py: padding-block,
  br: border-radius,
  g: gap,
);

$font-properties: (
  fs: font-size,
);

@function round2($number) {
  @return math.div(round($number * 100), 100);
}

@function getPercent($size, $ratio: 100) {
  @return round2((math.div($size, $screen)) * $ratio);
}

@function toPx($size) {
  @return $size * 1px;
}

@function toRem($size) {
  @return math.div($size, 16) * 1rem;
}

@function getMinRem($percent) {
  @return round2($percent * $min);
}

@function getMaxRem($percent) {
  @return round2($percent * $max);
}

@function getVW($percent) {
  @return round2($percent * $unit-fluid);
}

@function getFinalMinDiv($size, $ratio) {
  @return round2(math.div($size, $ratio));
}

@function getFinalMinMulti($size, $ratio) {
  @return round2($size * $ratio);
}

@mixin getVarSetter($key, $eva) {
  @each $setter in $setters-type {
    [data-setter="#{$setter}"] {
      .#{$key}-#{$eva}-\@ {
        --abstract-getter: var(--#{$eva}#{$setter});
      }
    }
  }
}

@mixin getAllSizingClass($prop, $key, $eva) {
  @each $class in $sizing-class {
    .#{$key}-#{$eva}#{$class} {
      #{$prop}: var(--#{$eva}#{$class});
    }
  }
  @if $dev-mode {
    .#{$key}-#{$eva}-\@ {
      #{$prop}: var(--abstract-getter);
    }
  }
}

@mixin getAllFontSizeClass($prop, $key, $eva) {
  @each $class in $font-size-class {
    .#{$key}-#{$eva}#{$class} {
      #{$prop}: var(--#{$key}-#{$eva}#{$class});
    }
  }
}

@function is-map($var) {
  @return type-of($var) == "map";
}

// Boucle pour les var
:root {
  @each $size in $sizes {
    $eva: $eva + 1;

    $calc-percent: getPercent($size);
    $calc-percent_: getPercent($size, $ez);

    $size-px: toPx($size);
    $size-rem: toRem($size);

    $rem-min: getMinRem($calc-percent);
    $rem-max: getMaxRem($calc-percent);
    $vw: getVW($calc-percent);

    $vw_: calc(#{getVW($calc-percent_)} - #{$rem-min});

    $final-min__: getFinalMinDiv($rem-min, $eva);
    $final-min_: getFinalMinDiv($rem-min, $Φ);
    $final-min: getFinalMinMulti($rem-min, $Φ);

    $css-vars: (
      "__": (
        min: $final-min__,
        fluid: $vw_,
        max: $rem-max,
      ),
      "_": (
        min: $final-min_,
        fluid: $vw,
        max: $rem-max,
      ),
      "": (
        min: $rem-min,
        fluid: $vw,
        max: $rem-max,
      ),
      "-": (
        min: $final-min,
        fluid: $vw,
        max: $rem-max,
      ),
    );

    @if $dev-mode {
      $css-vars-dev: (
        "-px": $size-px,
        "-rem": $size-rem,
      );
      $css-vars: map.merge($css-vars, $css-vars-dev);
    }

    @each $key, $prop in $css-vars {
      @if (is-map($prop)) {
        --#{$eva}#{$key}: clamp(#{map-get($prop, min)}, #{map-get($prop, fluid)}, #{map-get($prop, max)});
      } @else {
        --#{$eva}#{$key}: #{$prop};
      }
    }
  }
}

@if $build-class {
  // Boucle SCSS pour générer des class avec classe
  @each $size in $sizes {
    $eva: $eva + 1;

    $calc-percent: getPercent($size);
    $calc-percent_: getPercent($size, $ez);

    $size-px: toPx($size);
    $size-rem: toRem($size);

    $rem-min: getMinRem($calc-percent);
    $rem-max: getMaxRem($calc-percent);
    $vw: getVW($calc-percent);

    $vw_: calc(#{getVW($calc-percent_)} - #{$rem-min});

    $final-min__: getFinalMinDiv($rem-min, $eva);
    $final-min_: getFinalMinDiv($rem-min, $Φ);
    $final-min: getFinalMinMulti($rem-min, $Φ);

    $css-vars: (
      "__": (
        min: $final-min__,
        fluid: $vw_,
        max: $rem-max,
      ),
      "_": (
        min: $final-min_,
        fluid: $vw,
        max: $rem-max,
      ),
      "": (
        min: $rem-min,
        fluid: $vw,
        max: $rem-max,
      ),
      "-": (
        min: $final-min,
        fluid: $vw,
        max: $rem-max,
      ),
    );

    @if $dev-mode {
      $css-vars-dev: (
        "-px": $size-px,
        "-rem": $size-rem,
      );
      $css-vars: map.merge($css-vars, $css-vars-dev);
    }

    @each $key, $prop in $properties {
      @if $dev-mode == true {
        @include getVarSetter($key, $eva);
      }

      @include getAllSizingClass($prop, $key, $eva);
    }
  }
}

$eva: 0;
$min: 0.6rem;
//$ez : 110;

$Φ: 1.3;
$fs: "fs";

// Boucle pour les vars
:root {
  @each $size in $font-sizes {
    $eva: $eva + 1;
    $calc-percent: getPercent($size);

    $size-px: toPx($size);
    $size-rem: toRem($size);

    $rem-min: getMinRem($calc-percent);
    $vw: getVW($calc-percent);
    $rem-max: getMaxRem($calc-percent);

    $final-min__: getFinalMinDiv($rem-min, $Φ);
    $final-min: getFinalMinMulti($rem-min, $Φ);

    $css-fs-vars: (
      "__": (
        min: $final-min__,
        fluid: $vw,
        max: $rem-max,
      ),
      "_": (
        min: $rem-min,
        fluid: $vw,
        max: $rem-max,
      ),
      "": (
        min: $final-min,
        fluid: $vw,
        max: $rem-max,
      ),
    );

    @if $dev-mode {
      $css-vars-dev: (
        "-px": $size-px,
        "-rem": $size-rem,
      );
      $css-fs-vars: map.merge($css-fs-vars, $css-vars-dev);
    }

    @each $key, $prop in $css-fs-vars {
      @if (is-map($prop)) {
        --#{$fs}-#{$eva}#{$key}: clamp(#{map-get($prop, min)}, #{map-get($prop, fluid)}, #{map-get($prop, max)});
      } @else {
        --#{$fs}-#{$eva}#{$key}: #{$prop};
      }
    }
  }
}

// Boucle SCSS pour générer des class des font-size avec classe

@if ($build-class) {
  @each $size in $font-sizes {
    $eva: $eva + 1;
    $calc-percent: getPercent($size);

    $size-px: toPx($size);
    $size-rem: toRem($size);

    $rem-min: getMinRem($calc-percent);
    $vw: getVW($calc-percent);
    $rem-max: getMaxRem($calc-percent);

    $final-min__: getFinalMinDiv($rem-min, $Φ);
    $final-min: getFinalMinMulti($rem-min, $Φ);

    $css-fs-vars: (
      "__": (
        min: $final-min__,
        fluid: $vw,
        max: $rem-max,
      ),
      "_": (
        min: $rem-min,
        fluid: $vw,
        max: $rem-max,
      ),
      "": (
        min: $final-min,
        fluid: $vw,
        max: $rem-max,
      ),
    );

    @if $dev-mode {
      $css-vars-dev: (
        "-px": $size-px,
        "-rem": $size-rem,
      );
      $css-fs-vars: map.merge($css-fs-vars, $css-vars-dev);
    }

    @each $key, $prop in $font-properties {
      @include getAllFontSizeClass($prop, $key, $eva);
    }
  }
}
