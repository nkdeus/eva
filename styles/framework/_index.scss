@import "reset";

// idée de base
/*
//ratio d'ajustement
--Φ: 1.61803398875;
//screen size on figma || XD ( test 150px )
--screen: 1440;
--base-1: 150; 
--calc-1: calc(calc(var(--base-1) / var(--screen)) * 100);
--calc-1-ez: calc(calc(var(--base-1) / var(--screen)) * 142.4);

--1rem-min: calc(var(--calc-1) * 0.38rem);
--1vw: calc(var(--calc-1) * 1vw);
--1vw-ez: calc(calc(var(--calc-1-ez) * 1vw) - var(--1rem-min)) ;
--1rem-max: calc(var(--calc-1) * 1rem);

--1-ez: clamp(1rem , var(--1vw-ez) ,var(--1rem-max));
--1: clamp(calc(var(--1rem-min) / var(--Φ)) , var(--1vw),var(--1rem-max));
--1-: clamp(var(--1rem-min)  , var(--1vw) ,var(--1rem-max));
--1--: clamp(calc(var(--1rem-min) * var(--Φ)) , var(--1vw) ,var(--1rem-max));
*/

// START FRAMEWORK
// EVA-CSS v1.0

$max: 1rem;
$Φ: 1.61803398875;
$min: 0.38rem;
$ez: 142.4;
$unit: 1rem;
$unit-fluid: 1vw;

$screen: 1440;
$sizes: 5, 10, 15, 25, 40, 65, 105, 170, 275, 445, 720;
$font-sizes: 12, 16, 24, 28, 40, 58, 72;
$eva: 0;

$properties: (
  w: width,
  h: height,
  p: padding,
  px: padding-inline,
  py: padding-block,
  g: gap,
  br: border-radius,
  bw: border-width,
);

$font-properties: (
  fs: font-size,
);

@function round2($number) {
  @return round($number * 100) / 100;
}

// Boucle SCSS pour générer des classes avec classe
@each $size in $sizes {
  $eva: $eva + 1;
  $calc-percent: round2(($size / $screen) * 100);
  $calc-percent_: round2(($size / $screen) * $ez);

  $size-px: $size * 1px;
  $size-rem: ($size / 16) * 1rem;
  $rem-min: round2($calc-percent * $min);
  $vw: round2($calc-percent * $unit-fluid);
  $vw_: calc(#{round2($calc-percent_ * $unit-fluid)} - #{$rem-min});
  $rem-max: round2($calc-percent * $max);

  :root {
    --#{$eva}__: clamp(#{round2($rem-min / $eva)}, #{$vw_}, #{$rem-max});
    --#{$eva}_: clamp(#{round2($rem-min / $Φ)}, #{$vw}, #{$rem-max});
    --#{$eva}: clamp(#{$rem-min}, #{$vw}, #{$rem-max});
    --#{$eva}-: clamp(#{round2($rem-min * $Φ)}, #{$vw}, #{$rem-max});
    --#{$eva}-px: #{$size-px};
    --#{$eva}-rem: #{$size-rem};
  }

  @each $key, $prop in $properties {
    [data-setter="__"] {
      .#{$key}-#{$eva}-\@ {
        --abstract-getter: var(--#{$eva}__);
      }
    }
    [data-setter="_"] {
      .#{$key}-#{$eva}-\@ {
        --abstract-getter: var(--#{$eva}_);
      }
    }
    [data-setter=""] {
      .#{$key}-#{$eva}-\@ {
        --abstract-getter: var(--#{$eva});
      }
    }
    [data-setter="-"] {
      .#{$key}-#{$eva}-\@ {
        --abstract-getter: var(--#{$eva}-);
      }
    }
    [data-setter="-px"] {
      .#{$key}-#{$eva}-\@ {
        --abstract-getter: var(--#{$eva}-px);
      }
    }
    [data-setter="-rem"] {
      .#{$key}-#{$eva}-\@ {
        --abstract-getter: var(--#{$eva}-rem);
      }
    }
    .#{$key}-#{$eva} {
      #{$prop}: var(--#{$eva});
      &- {
        #{$prop}: var(--#{$eva}-);
        &- {
          #{$prop}: var(--#{$eva}--);
        }
      }
      &_ {
        #{$prop}: var(--#{$eva}_);
        &_ {
          #{$prop}: var(--#{$eva}__);
        }
      }
      &-px {
        #{$prop}: var(--#{$eva}-px);
      }
      &-rem {
        #{$prop}: var(--#{$eva}-rem);
      }
      &-\@ {
        #{$prop}: var(--abstract-getter);
      }
    }
  }
}

$eva: 0;
$min: 0.6rem;
//$ez : 110;

$Φ: 1.3;
$fs: "fs";
// Boucle SCSS pour générer des classes des fonts avec classe
@each $size in $font-sizes {
  $eva: $eva + 1;
  $calc-percent: round2(($size / $screen) * 100);

  $size-px: $size * 1px;
  $size-rem: ($size / 16) * 1rem;
  $rem-min: round2($calc-percent * $min);
  $vw: round2($calc-percent * $unit-fluid);
  $rem-max: round2($calc-percent * $max);

  :root {
    --#{$fs}-#{$eva}__: clamp(#{round2($rem-min / $Φ)}, #{$vw}, #{$rem-max});
    --#{$fs}-#{$eva}_: clamp(#{$rem-min}, #{$vw}, #{$rem-max});
    --#{$fs}-#{$eva}: clamp(#{round2($rem-min * $Φ)}, #{$vw}, #{$rem-max});
    --#{$fs}-#{$eva}-px: #{$size-px};
    --#{$fs}-#{$eva}-rem: #{$size-rem};
  }
  @each $key, $prop in $font-properties {
    .#{$key}-#{$eva} {
      #{$prop}: var(--#{$fs}-#{$eva});

      &_ {
        #{$prop}: var(--#{$fs}-#{$eva}_);
        &_ {
          #{$prop}: var(--#{$fs}-#{$eva}__);
        }
      }
      &-px {
        #{$prop}: var(--#{$fs}-#{$eva}-px);
      }
      &-rem {
        #{$prop}: var(--#{$fs}-#{$eva}-rem);
      }
      &-1 {
        #{$prop}: 1px;
      }
    }
  }
}

// END FRAMEWORK

// start nano utility
*,
*:before,
*:after {
  box-sizing: border-box;
  //outline:1px solid red;
}
:root {
  --fade: 50%;
  --fade_: 20%;
  --fade__: 5%;

  --wght: 400;

  --root-brand: 78% 0.2 73;
  --root-dark: 5% 0 0;
  --root-light: 95% 0 0;

  --brand: oklch(var(--root-brand));
  --brand_: oklch(var(--root-brand) / var(--fade));
  --brand__: oklch(var(--root-brand) / var(--fade_));
  --brand___: oklch(var(--root-brand) / var(--fade__));

  --dark: oklch(var(--root-dark));
  --dark_: oklch(var(--root-dark) / var(--fade));
  --dark__: oklch(var(--root-dark) / var(--fade_));
  --dark___: oklch(var(--root-dark) / var(--fade__));

  --light: oklch(var(--root-light));
  --light_: oklch(var(--root-light) / var(--fade));
  --light__: oklch(var(--root-light) / var(--fade_));
  --light___: oklch(var(--root-light) / var(--fade__));
}

.darkMode {
  --dark: oklch(var(--root-light));
  --dark_: oklch(var(--root-light) / var(--fade));
  --dark__: oklch(var(--root-light) / var(--fade_));
  --dark___: oklch(var(--root-light) / var(--fade__));

  --light: oklch(var(--root-dark));
  --light_: oklch(var(--root-dark) / var(--fade));
  --light__: oklch(var(--root-dark) / var(--fade_));
  --light___: oklch(var(--root-dark) / var(--fade__));
}

// colors
._bc,
._bg,
._c {
  &-brand {
    --current-color: var(--brand);
    &_ {
      --current-color: var(--brand_);
      &_ {
        --current-color: var(--brand__);
        &_ {
          --current-color: var(--brand___);
        }
      }
    }
  }
  &-dark {
    --current-color: var(--dark);
    &_ {
      --current-color: var(--dark_);
      &_ {
        --current-color: var(--dark__);
        &_ {
          --current-color: var(--dark___);
        }
      }
    }
  }
  &-light {
    --current-color: var(--light);
    &_ {
      --current-color: var(--light_);
      &_ {
        --current-color: var(--light__);
        &_ {
          --current-color: var(--light___);
        }
      }
    }
  }
}
[class*="_bc"] {
  border-color: var(--current-color);
}
[class*="_bg"] {
  background-color: var(--current-color);
}
[class*="_c"] {
  color: var(--current-color);
}

a {
  text-decoration: none;
  &:hover {
    background-color: var(--brand__);
    span {
      color: var(--dark);
    }
    &:is(._bg-brand) {
      background-color: var(--dark);
      span {
        color: var(--light);
      }
    }
  }
}

.flex {
  display: flex;
  flex-direction: row;
  &.center {
    align-items: center;
  }
  &.space {
    justify-content: space-between;
    align-items: center;
  }
  &.y {
    flex-direction: column;
    align-items: flex-start;
    &.center {
      justify-content: center;
    }
  }
}
.stretch {
  flex: 1;
}

.ar-1 {
  aspect-ratio: 1/1;
}

.border {
  border-style: solid;
}

.oh {
  overflow: hidden;
}

.lh-1 {
  line-height: 1;
}

img {
  object-fit: cover;
}

// end nano utility
body {
  margin: 0;
  font-family: "Noto Sans Display", sans-serif;
  font-optical-sizing: auto;
  font-style: normal;
  font-style: normal;
  font-variation-settings: "wght" 400;
  background-color: var(--light);
  color: var(--dark);
  padding-bottom: var(--6);
  overflow: auto;
}

h1,
h2,
h3,
h4 {
  margin: 0;
  padding: 0;
  font-optical-sizing: auto;
  font-style: normal;
  font-variation-settings: "wght" var(--wght);
  font-family: "Bodoni Moda", serif;
}
p {
  margin: 0;
}

nav {
  background-color: var(--light_);
  backdrop-filter: blur(1rem);
  top: 0px;
  width: 100%;
  position: sticky;
  z-index: 100;

  ol {
    display: flex;
    margin: 0;
    padding: 0;
    width: 100%;
    list-style: none;
    gap: var(--2__);

    li {
      padding: var(--1);
      border-radius: var(--3-);
      outline: 1px solid var(--dark___);
      text-align: center;
      flex: 1;
      cursor: pointer;
      &:hover:not(.selected) {
        background-color: var(--dark);
        color: var(--light);
      }
      &.selected {
        background-color: var(--brand);
        outline: 3px solid var(--brand__);
      }
    }
  }
}

.ttu {
  text-transform: uppercase;
}

.hide {
  display: none !important;
}

.bold {
  --wght: 700;
}

p {
  width: 100%;
  line-height: 1.6;
  max-width: var(--11);
}

section {
  width: 100%;
  overflow: hidden;
  padding-bottom: var(--3);
  position: relative;
  z-index: 20;
  nav {
    padding-inline: unset;
    z-index: unset;
    position: relative;
  }
}
.title {
  line-height: 0.8;
  color: var(--brand);
  span {
    line-height: 0.3 !important;
    background-color: red;
  }
  font-variation-settings: "wght" var(--wght);
  &.reverse {
    font-variation-settings: "wght" calc(400 + calc(900 - var(--wght)));
  }
}

.demo-line {
  position: relative;
  transition: width 0.5s;

  code {
    position: absolute;
    top: 0;
    translate: 0% calc(-100% - var(--1));
    width: fit-content;
    white-space: nowrap;
    z-index: 2;
    background-color: var(--dark___);
    color: var(--dark);
    padding: var(--1);
  }
}

.line {
  height: 1px;
  background-color: var(--dark);
  position: relative;
  transition: width 0.5s;

  width: 100%;
  &:before,
  &:after {
    content: "";
    position: absolute;
    left: 0;
    top: -0.5rem;
    transition: width 0.5s;
    width: 1px;
    height: 1rem;
    background-color: var(--dark);
  }
  &:after {
    left: unset;
    right: 0;
  }
}

.line-y {
  width: 1px;
  position: relative;
  background-color: var(--dark);
  opacity: 0.2;
  &:after {
    content: "";
    position: absolute;
    height: 100%;
    aspect-ratio: 1/1;
    background-color: #ffffff22;
    border-radius: 100%;
    transform: translateX(-50%);
    border: 1px solid var(--dark);
  }
}

.stage {
  filter: blur(4px);
  position: absolute;
  overflow: hidden;
  pointer-events: none;
  z-index: 0;
  height: 100%;
  width: 100%;
  left: 0px;
  top: var(--6-);

  .stage-top {
    position: absolute;
    width: 100%;
    top: 0px;
    align-items: flex-start;
    justify-content: space-around;
  }
}
