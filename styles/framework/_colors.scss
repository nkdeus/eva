// Map des valeurs de fade avec des underscores
$fade-map: (
  "_": 50%,
  "__": 20%,
  "___": 5%,
);

$color-map: (
  "brand": 78% 0.2 73,
  "dark": 5% 0 0,
  "light": 95% 0 0,
);

// Génération des variables CSS avec les bons suffixes
:root {
  --wght: 400;

  @each $color-name, $color-value in $color-map {
    --root-#{$color-name}: #{$color-value};
    --#{$color-name}: oklch(var(--root-#{$color-name}));
    @each $suffix, $fade-value in $fade-map {
      --#{$color-name}#{$suffix}: oklch(var(--root-#{$color-name}) / #{$fade-value});
    }
  }
}

// Gestion du mode sombre
.darkMode {
  @each $color-name, $color-value in $color-map {
    @if $color-name == "light" {
      @each $suffix, $fade-value in $fade-map {
        --dark#{$suffix}: oklch(var(--root-#{$color-name}) / #{$fade-value});
      }
    } @else if $color-name == "dark" {
      @each $suffix, $fade-value in $fade-map {
        --light#{$suffix}: oklch(var(--root-#{$color-name}) / #{$fade-value});
      }
    }
  }
}

// Gestion du mode sombre
.darkMode {
  @each $color-name, $color-value in $color-map {
    @if $color-name == "light" {
      @each $fade-suffix, $fade-value in $fade-map {
        --dark#{$fade-suffix}: oklch(var(--root-#{$color-name}) / #{$fade-value});
      }
    } @else if $color-name == "dark" {
      @each $fade-suffix, $fade-value in $fade-map {
        --light#{$fade-suffix}: oklch(var(--root-#{$color-name}) / #{$fade-value});
      }
    }
  }
}

$prefix: "_";
$colors-class: "brand", "dark", "light";
$fades: "_", "__", "___";
$colors: (
  c: color,
  bg: background-color,
  bc: border-color,
);

@mixin getAllColors($prop, $key, $eva) {
  @each $class in $colors-class {
    .#{$prefix}#{$key}-#{$class} {
      --current-#{$key}-color: var(--#{$class});
      @each $fade in $fades {
        &#{$fade} {
          --current-#{$key}-color: var(--#{$class}#{$fade});
        }
      }
    }
  }
  [class*="#{$prefix}#{$key}"] {
    #{$prop}: var(--current-#{$key}-color);
  }
}

@each $key, $prop in $colors {
  @include getAllColors($prop, $key, $eva);
}
