# Eva CSS Framework - Cursor Rules

## Principes Fondamentaux d'Eva CSS

### 1. Syst√®me de Tailles Fluides
- **TOUJOURS** utiliser les variables CSS g√©n√©r√©es : `var(--size)`, `var(--size_)`, `var(--size__)`, `var(--size-)`
- **NE JAMAIS** utiliser de valeurs fixes en px/rem dans le CSS
- **CONFIGURER** `$sizes` dans chaque projet avec seulement les tailles r√©ellement utilis√©es
- **PR√âF√âRER** les suffixes selon le contexte :
  - `__` : minimum (espacements tr√®s serr√©s)
  - `_` : r√©duit (espacement l√©ger)
  - `` : standard (utilisation normale)
  - `-` : √©tendu (espacement g√©n√©reux)

### 2. Syst√®me de Couleurs OKLCH
- **UTILISER** les variables de th√®me : `var(--brand)`, `var(--accent)`, `var(--extra)`, `var(--dark)`, `var(--light)`
- **CONFIGURER** les couleurs avec lightness, chroma, hue dans `.theme-xxx`
- **APPLIQUER** les classes utilitaires avec pr√©fixe `_` :
  - `_c-brand` pour color
  - `_bg-accent` pour background
  - `_bc-extra` pour border-color
- **UTILISER** les modificateurs d'opacit√© :
  - `_c-brand_` (65% opacit√©)
  - `_c-brand__` (35% opacit√©)
  - `_c-brand___` (5% opacit√©)
- **UTILISER** les modificateurs de luminosit√© :
  - `_bg-brand-d` (plus sombre)
  - `_bg-brand-b` (plus brillant)
  - `_bg-brand-d_` (beaucoup plus sombre)
  - `_bg-brand-b_` (beaucoup plus brillant)

### 3. Architecture SCSS
```scss
// Configuration obligatoire au d√©but de chaque projet
$build-class: true; // true = g√©n√®re les classes utilitaires / false = variables CSS uniquement
$sizes: 4, 8, 16, 32, 64; // SEULEMENT les tailles utilis√©es
$font-sizes: 16, 24, 32; // SEULEMENT les tailles de police utilis√©es

// Import Eva CSS Framework
@import "../../../styles/framework/eva";
@import "../../../styles/framework/colors";
@import "../../../styles/framework/theme";

// Th√®me sp√©cifique au projet
.theme-mon-projet {
  // Couleurs principales en OKLCH
  --brand-lightness: 62.8%;
  --brand-chroma: 0.258;
  --brand-hue: 29.23;
  
  --accent-lightness: 51.7%;
  --accent-chroma: 0.293;
  --accent-hue: 289.66;
  
  // Configuration du dark/light
  --current-lightness: 96.4%;
  --current-darkness: 26.4%;
}
```

### 4. Structure HTML
```html
<!-- TOUJOURS inclure ces classes sur body -->
<body class="current-theme theme-mon-projet">
  <!-- Le toggle-theme s'applique automatiquement -->
</body>
```

### 5. Choix du Mode d'Utilisation

#### üîß CHOISIR `$build-class: true` QUAND :
- Projet avec beaucoup de composants similaires
- D√©veloppement rapide/prototypage
- √âquipe pr√©f√®re les classes utilitaires (style Tailwind)
- Besoin de r√©utiliser des styles communs rapidement

#### üéØ CHOISIR `$build-class: false` QUAND :
- Projet avec design tr√®s sp√©cifique/unique
- Pr√©f√©rence pour les classes s√©mantiques
- Optimisation du CSS final (moins de classes g√©n√©r√©es)
- Contr√¥le total sur le CSS g√©n√©r√©

#### ‚úÖ BONNES PRATIQUES (TOUJOURS)
```scss
// Dans les deux modes, TOUJOURS utiliser les variables Eva CSS
.ma-classe {
  width: var(--64);           // Variable Eva CSS
  padding: var(--16);         // Variable Eva CSS
  gap: var(--8);             // Variable Eva CSS
  font-size: var(--fs-24);   // Variable de font-size
  background-color: var(--brand); // Variable de couleur
}
```

#### ‚ùå NE JAMAIS FAIRE (DANS LES DEUX MODES)
```scss
.ma-classe {
  width: 64px;               // Valeur fixe interdite
  padding: 1rem;             // Valeur fixe interdite
  gap: 8px;                  // Valeur fixe interdite
  font-size: 24px;           // Valeur fixe interdite
  background-color: #ff0000; // Couleur hard-cod√©e interdite
}
```

### 6. Modes d'Utilisation du Framework

#### üîß MODE `$build-class: true` (Classes Utilitaires)
**HTML** : Utiliser les classes g√©n√©r√©es directement
```html
<!-- Classes Eva CSS g√©n√©r√©es automatiquement -->
<div class="_bg-brand w-64 p-16">Contenu</div>
<p class="_c-dark fs-16">Texte</p>
<button class="_bg-accent_ hover:_bg-accent">Bouton</button>
```

**SCSS** : Minimal, seulement pour les styles sp√©cifiques
```scss
.ma-classe-specifique {
  // Utiliser les variables pour les propri√©t√©s non-couvertes
  border: 1px solid var(--brand);
  transform: rotate(45deg);
}
```

#### üéØ MODE `$build-class: false` (Variables CSS uniquement)
**HTML** : Classes s√©mantiques uniquement
```html
<!-- PAS de classes utilitaires Eva CSS -->
<div class="hero-section">Contenu</div>
<p class="subtitle">Texte</p>
<button class="primary-button">Bouton</button>
```

**SCSS** : Utiliser UNIQUEMENT les variables CSS
```scss
.hero-section {
  background-color: var(--brand);
  width: var(--64);
  padding: var(--16);
}

.subtitle {
  color: var(--dark);
  font-size: var(--fs-16);
}

.primary-button {
  background-color: var(--accent);
  &:hover {
    background-color: var(--accent-d);
  }
}
```

#### ‚ùå ERREURS COURANTES
```html
<!-- ERREUR : Classes utilitaires avec $build-class: false -->
<div class="w-64 p-16">Ne fonctionnera pas</div>

<!-- ERREUR : Variables mal utilis√©es -->
<div class="ma-classe" style="width: 64px;">Valeur fixe interdite</div>
```

### 7. Gestion des Th√®mes
- **UTILISER** `.current-theme` comme classe de base obligatoire
- **BASCULER** avec `.toggle-theme` pour le mode sombre
- **CONFIGURER** `$auto-theme-switch: false` pour contr√¥le manuel
- **D√âFINIR** les variables de th√®me dans une classe `.theme-xxx` sp√©cifique

### 8. Performance et Maintenance
- **OPTIMISER** en ne d√©clarant que les tailles r√©ellement utilis√©es dans `$sizes`
- **R√âUTILISER** les variables existantes avant d'en cr√©er de nouvelles
- **DOCUMENTER** les nouvelles tailles ajout√©es avec des commentaires
- **COMPILER** apr√®s chaque modification avec `npx sass styles/projet.scss:render/projet.css`

### 9. Naming Conventions
- **Fichiers** : `nomprojet.scss` dans `styles/`
- **Th√®mes** : `.theme-nomprojet`
- **Classes custom** : pr√©fixer avec le nom du projet si n√©cessaire
- **Variables** : suivre la convention Eva CSS `--taille` et `--fs-taille`

### 10. Debug et Validation
- **V√âRIFIER** que toutes les variables utilis√©es sont d√©finies dans `$sizes`
- **CONTR√îLER** la coh√©rence avec `$build-class` :
  - Si `true` : v√©rifier que les classes utilitaires existent dans le HTML
  - Si `false` : v√©rifier qu'aucune classe utilitaire Eva CSS n'est utilis√©e dans le HTML
- **TESTER** le toggle de th√®me fonctionne correctement
- **VALIDER** que les couleurs respectent les contrastes accessibilit√©
- **COMPILER** sans erreurs SCSS
- **OPTIMISER** la taille du CSS final selon le mode choisi

## Workflow Recommand√©
1. **Analyser le design** (Figma/maquette)
2. **D√©cider du mode** : `$build-class: true` ou `false` selon le projet
3. **Extraire TOUTES les tailles utilis√©es** ‚Üí `$sizes`
4. **Extraire les couleurs** ‚Üí convertir en OKLCH ‚Üí variables de th√®me
5. **D√©finir le th√®me** `.theme-projet`
6. **D√©velopper selon le mode choisi** :
   - Si `true` : utiliser les classes utilitaires Eva CSS dans le HTML
   - Si `false` : cr√©er des classes s√©mantiques et utiliser les variables CSS
7. **Compiler et tester**
8. **Valider la coh√©rence** du mode choisi 

---

## üéØ Figma ‚Üí Int√©gration : R√®gles de fid√©lit√© et mapping

### üü¢ Tableau des tailles et gaps (palette de couleurs)

| √âl√©ment                        | Taille/gap Figma | Variable evaCSS |
|------------------------------- |------------------|-----------------|
| Cercle principal (header)      | 141px            | var(--141)      |
| Cercle palette (color-list)    | 64px             | var(--64)       |
| Gap entre palette-group        | 32px             | var(--32)       |
| Gap label principal/cercles    | 16px             | var(--16)       |
| Gap entre cercles (palette)    | 8px              | var(--8)        |
| Gap cercle/label sous cercle   | 4px              | var(--4)        |

### üö´ R√®gle stricte : AUCUN CSS inline
> Toute couleur, taille, espacement, etc. doit √™tre appliqu√©e via une classe et une variable CSS, jamais via un attribut `style` dans le HTML.

### ‚úÖ Checklist Figma ‚Üí SCSS/HTML
- [ ] Toutes les tailles Figma sont extraites et ajout√©es √† `$sizes`
- [ ] Tous les gaps sont identifi√©s et mapp√©s
- [ ] Les variations de couleur sont bien g√©n√©r√©es
- [ ] Les labels sous les cercles sont pr√©sents si dans le Figma
- [ ] Les backgrounds de groupe sont conformes au Figma
- [ ] Aucune valeur fixe ni CSS inline

### üè∑Ô∏è Convention de nommage pour les variations
Pour chaque variation d‚Äôopacit√©, utiliser la convention :
```html
<div class="palette-circle brand__"></div> <!-- var(--brand__) -->
```

### üí° Exemple complet palette (HTML + SCSS)
```html
<div class="palette-group palette-brand">
  <span class="palette-label">BRAND</span>
  <div class="palette-circles">
    <div class="palette-item">
      <div class="palette-circle brand"></div>
      <div class="palette-variation-label">BRAND</div>
    </div>
    <div class="palette-item">
      <div class="palette-circle brand_"></div>
      <div class="palette-variation-label">BRAND_</div>
    </div>
    <div class="palette-item">
      <div class="palette-circle brand__"></div>
      <div class="palette-variation-label">BRAND__</div>
    </div>
    <div class="palette-item">
      <div class="palette-circle brand___"></div>
      <div class="palette-variation-label">BRAND___</div>
    </div>
  </div>
</div>
```
```scss
.palette-circles { gap: var(--8); }
.palette-item { gap: var(--4); }
.palette-circle { width: var(--64); height: var(--64); }
.palette-group { gap: var(--16); }
.palette-section { gap: var(--32); }
```

> **Toujours relire la maquette Figma pour chaque d√©tail (taille, gap, label, couleur) avant d‚Äôint√©grer.** 

## R√®gle d'int√©gration Figma via MCP (Cursor)

- **Toujours utiliser le serveur MCP Figma (Cursor) pour extraire toutes les variables de la maquette**‚ÄØ:
  - Gaps, paddings, tailles, font-sizes, couleurs, opacit√©s, backgrounds‚Ä¶
- **Utiliser les outils `getCode` et `getVar`** pour obtenir les valeurs exactes (ex‚ÄØ: `--fs-36`, `--fs-10`, `64`, `32`, `brand: #ff0000`‚Ä¶)
- **Reporter ces valeurs dans `$sizes`, `$font-sizes` et le SCSS**
- **Utiliser les variables g√©n√©r√©es dans le HTML/SCSS** (ex‚ÄØ: `font-size: var(--fs-36)`, `gap: var(--8)`, etc.)
- **Toujours valider chaque d√©tail avec la maquette Figma**

**Exemple**‚ÄØ:
- MCP retourne‚ÄØ: `--fs-36: 36`, `--fs-10: 10`, `64: 64`, `32: 32`, `brand: #ff0000`
- Dans le SCSS‚ÄØ:
  ```scss
  $sizes: 4, 8, 10, 16, 32, 36, 54, 64, 120, 141, 183;
  $font-sizes: 10, 16, 36, 120;
  ```
- Dans le HTML/SCSS‚ÄØ:
  ```scss
  .palette-label { font-size: var(--fs-36); }
  .palette-variation-label { font-size: var(--fs-10); }
  .palette-circle { width: var(--64); height: var(--64); }
  .palette-circles { gap: var(--8); }
  .palette-group { gap: var(--16); }
  .palette-section { gap: var(--32); }
  ``` 